---
- hosts: ambient_light_tv

  vars:
    ansible_python_interpreter: /usr/bin/python3
    base_working_dir: /home/pi/ambient
    hyperion_version: 2.0.0-alpha.9
    hyperion_deb_file: "Hyperion-{{ hyperion_version }}-Linux-armv6l.deb"
    hyperion_base_download_url: "https://github.com/hyperion-project/hyperion.ng/releases/download"

  tasks:
    - name: Create working directory
      file:
        path: "{{ base_working_dir }}"
        state: directory
        owner: pi
        group: pi
        mode: 0755

    - name: Check installed version of Hyperion
      shell: >
        set -o pipefail && \
        hyperiond --version | grep -I "Version" | cut -d':' -f 2 | cut -d' ' -f2
      register: hyperion_installed_version
      changed_when: False

    - block:
        - name: Download Hyperion package
          get_url:
            url: "{{ hyperion_base_download_url }}/{{ hyperion_version }}/{{ hyperion_deb_file }}"
            dest: "{{ base_working_dir }}/{{ hyperion_deb_file }}"
            mode: '0644'

        - name: Remove previous installation of hyperion, if any
          apt:
            name: hyperion
            state: absent

        - name: Install a Hyperion .deb package
          apt:
            deb: "{{ base_working_dir }}/{{ hyperion_deb_file }}"
            state: present
          become: yes

        - name: Copy Hyperion configuration file
          copy:
            src: "Hyperion-{{ hyperion_version }}.json"
            dest: "{{ base_working_dir }}"
            owner: pi
            group: pi
            mode: "0644"

        - name: Notify user about needed manual actions
          debug:
            msg:
              - No known way now to import the configuration. Need to be done manually through web interface.
              - hyperiond@pi.service is started automatically after install. Will start also after reboot.

      when: hyperion_installed_version.stdout != hyperion_version

    - name: Copy script to restart hyperion on errors
      copy:
        src: "{{ item.src }}"
        dest: "{{ base_working_dir }}"
        owner: pi
        group: pi
        mode: "{{ item.mode }}"
      with_items:
        - {src: "restart_hyperion_on_error.sh", mode: "0755"}

    - name: Setup cron to resart Hyperion if it got a 'device not found' error
      cron:
        name: "Restart hyperion if got a 'device not found' error"
        minute: "{{ item.minute }}"
        user: pi
        job: |
          /bin/bash {{ base_working_dir }}/restart_hyperion_on_error.sh >> /tmp/hyperion_restart.log 2>&1
      with_items:
        - {minute: "*/5"}

    - name: Setup cron to resart device with Hyperion on regular basis
      cron:
        name: "Restart device nightly"
        minute: 0
        hour: 5
        user: pi
        job: |
          /bin/bash sudo reboot
